{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;wBACR,WAAW;;iCACP,sBAAsB;;AAEhD,SAAS,iBAAiB,CAAC,IAAI,EAAE;;;;;AAK/B,MAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;AACnC,MAAI,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAClD,MAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;;;AAGnD,SAAO,UAAA,KAAK,EAAI;AACd,WAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE;AACjC,UAAI,EAAE,KAAK,CAAC,IAAI;AAChB,SAAG,EAAE;AACH,cAAM,EAAE,KAAK;OACd;KACF,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AAChB,aAAO;AACL,YAAI,EAAE,MAAM,CAAC,GAAG;AAChB,WAAG,EAAE,MAAM,CAAC,GAAG;OAChB,CAAA;KACF,CAAC,CAAC;GACJ,CAAA;CACF;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE;;AAE5B,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EACjD,OAAO,KAAK,CAAC;;AAEf,QAAI,KAAK,CAAC,QAAQ,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC;;AAE3C,WAAO,QAAQ,CAAC,oBAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAW,EAAK;UAAf,IAAI,GAAL,IAAW,CAAV,IAAI;UAAE,GAAG,GAAV,IAAW,CAAJ,GAAG;;AAClG,WAAK,CAAC,IAAI,GAAG,IAAI,CAAC;;AAElB,UAAI,GAAG,EAAE;AACP,aAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;OAC3B;;AAED,aAAO,KAAK,CAAA;KACb,CAAC,CAAA;GACH,CAAA;CACF;;AAED,IAAI,UAAU,CAAC;;qBAEA,UAAS,EAAE,EAAa;MAAX,IAAI,yDAAG,EAAE;;AACnC,MAAI,CAAE,UAAU,EACd,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAC;;AAExE,SAAO,kCAAU,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC,CAAA;CACpD","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nfunction postcssPooledTask(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  var log = require('sigh-core').log;\n  var pluginsFactory = require(opts.pluginsFactory);\n  var postcss = require(\"postcss\")(pluginsFactory());\n\n  // this task runs inside the subprocess to transform each event\n  return event => {\n    return postcss.process(event.data, {\n      from: event.path,\n      map: {\n        inline: false\n      }\n    }).then(result => {\n      return {\n        data: result.css,\n        map: result.map\n      }\n    });\n  }\n}\n\nfunction adaptEvent(compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n    if (event.type !== 'add' && event.type !== 'change')\n      return event;\n\n    if (event.fileType !== 'css') return event;\n\n    return compiler(_.pick(event, 'type', 'data', 'path', 'projectPath', 'sourcePath')).then(({data, map}) => {\n      event.data = data;\n\n      if (map) {\n        event.applySourceMap(map);\n      }\n\n      return event\n    })\n  }\n}\n\nvar pooledProc;\n\nexport default function(op, opts = {}) {\n  if (! pooledProc)\n    pooledProc = op.procPool.prepare(postcssPooledTask, opts, { module });\n\n  return mapEvents(op.stream, adaptEvent(pooledProc))\n}\n"]}